@using RevisioHub.Web.Model.Db.Services
@using RevisioHub.Web.Services
@implements IDisposable

@inject NavigationManager NavigationManager
@inject Context Context;

<div class="top-row ps-3 navbar">
    <div class="container-fluid">
        <a class="navbar-brand" href="">RevisioHub</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <span class="bi bi-gear-fill p-2" aria-hidden="true"></span> Services

                    @foreach(var service in Context.Services)
                    {
                        var href = $"services/{service.Id}";
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="@href">
                                <span class="bi bi-gear p-2" aria-hidden="true"></span> @service.Name
                            </NavLink>
                        </div>
                    }
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Services/Add">
                            <span class="bi bi-plus-circle p-2" aria-hidden="true"></span> Add
                        </NavLink>
                    </div>
                </div>

                <div class="nav-item m-0">
                    <span class="bi bi-gear-fill p-2" aria-hidden="true"></span> Hosts
                    @foreach (var host in Context.Hosts)
                    {
                        var href = $"Hosts/{host.Id}";
                        bool connected = ClientService.Users.Contains(host.Name);
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="@href">
                                <span class="bi bi-gear p-2 @(connected ? "text-success" : "text-danger")" aria-hidden="true"></span> @host.Name
                            </NavLink>
                        </div>
                    }


                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Hosts/Add">
                            <span class="bi bi-plus-circle p-2" aria-hidden="true"></span> Add
                        </NavLink>
                    </div>
                </div>


                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        ClientService.Users.CollectionChanged += OnClientsChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        ClientService.Users.CollectionChanged -= OnClientsChanged;
    }

    private async void OnClientsChanged(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
    {
        Console.WriteLine("suiohfgiuhgiuhdsf");
        await InvokeAsync(StateHasChanged);
    }

}


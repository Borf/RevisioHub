@page "/ServiceHost/{ServiceHostId:int}"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.SignalR
@using Microsoft.EntityFrameworkCore
@using Microsoft.IdentityModel.Tokens
@using RevisioHub.Web.Components.Account.Shared
@using RevisioHub.Web.Model
@using RevisioHub.Web.Model.Db.Services
@using System.Text
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using RevisioHub.Web.Services
@inject Context Context;
@inject Configuration configuration;
@inject IHubContext<ClientService> ClientService;


<h4>Service @ServiceHost.Host.Name on @ServiceHost.Host.Name</h4>
Host type
<input class="form-control disabled" @bind="@ServiceHost.Host.HostType" />
Working Directory
<input class="form-control" @bind="ServiceHost.WorkingDirectory" />

<h5>Environment variables</h5>
<ul class="list-group list-group">
    @foreach(var variable in ServiceHost.EnvironmentVariables)
    {
        <li>@variable.Variable -> @variable.Value</li>
    }
</ul>

<EditForm Model="EnvironmentVariable" method="post" OnValidSubmit="AddVariable">
    <div class="input-group">
        <input class="form-control" @bind="EnvironmentVariable.Variable" placeholder="Variable Name" />
        <input class="form-control" @bind="EnvironmentVariable.Value" placeholder="Variable Value"/>
        <button type="submit" class="btn btn-primary">Add Variable</button>
    </div>
</EditForm>


@code {
    [Parameter]
    public int ServiceHostId { get; set; } = 0;

    public ServiceHost ServiceHost => Context.ServiceHosts.Include(sh => sh.Service).Include(sh => sh.Host).First(s => s.Id == ServiceHostId);

    [SupplyParameterFromForm]
    private EnvironmentVariableModel EnvironmentVariable { get; set; } = new();

    public async Task AddVariable(EditContext editContext)
    {
        Context.EnvironmentVariables.Add(new EnvironmentVariable()
        {
            Variable = EnvironmentVariable.Variable,
            Value = EnvironmentVariable.Value,
            ServiceHostId = ServiceHostId
        });
        await Context.SaveChangesAsync();
        EnvironmentVariable = new();
    }

    private sealed class EnvironmentVariableModel
    {
        [Required]
        public string Variable { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }
}
@implements IDisposable
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR
@using RevisioHub.Common.Models
@using RevisioHub.Web.Model.Db.Services
@using RevisioHub.Web.Services
@using RevisioHub.Common.Models.db;
@inject IHubContext<ClientService> ClientService;
@inject Context Context;
@inject ServiceStatusService ServiceStatusService;
@inject ServiceVersionService ServiceVersionService;

@{
    var status = ServiceStatusService.GetValueOrDefault(ServiceHost.Id, new ServiceStatus());
    var bgColor = "bg-danger";
    if (status.Status.StartsWith("Running"))
        bgColor = "bg-success";
}
<li class="list-group-item border m-1 rounded card" style="width: 300px;">
    <div class="card-body p-0">
        <div class="card-header">
            <a style="width: 130px; text-decoration: none;" href="/Services/@ServiceHost.Service.Id" class="link-light fw-bold">@ServiceHost.Service.Name</a>
            on 
            <a style="width: 100px; text-decoration: none;" href="/Hosts/@ServiceHost.Host.Id" class="link-light fw-bold">@ServiceHost.Host.Name</a>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item @bgColor p-1">@status.Status</li>
            <li class="list-group-item p-1">
                <div class="row">
                    <div class="col"><span class="bi bi-cpu m-1"></span>@status.CpuPerc</div>
                    <div class="col"><span class="bi bi-memory m-1"></span>@status.Mem</div>
                    <div class="col"><span class="bi bi-hdd-network m-1"></span>@status.NetIO</div>
                </div>
            </li>
            <li class="list-group-item p-1" style="font-size: 0.7rem" title="Running Version">
                <span class="bi bi-git m-1"></span>
                @ServiceVersionService.GetValueOrDefault(ServiceHost.Id, "?")
            </li>
        </ul>
        <div class="btn-group" style="width: 100%">
            <a href="/ServiceHost/@ServiceHost.Id" class="btn btn-sm btn-secondary">Edit</a>
            <button @onclick="Start" class="btn btn-sm btn-success">Start</button>
            <button @onclick="Stop" class="btn btn-sm btn-danger">Stop</button>
            <button class="btn btn-sm btn-info">Update</button>
            <button class="btn btn-sm btn-primary">Log</button>
        </div>
    </div>
</li>


@code {
    [Parameter]
    public Common.Models.db.ServiceHost ServiceHost { get; set; } = null!;
    [Parameter]
    public int ServiceHostId { get; set; } = -1;

    protected override void OnInitialized()
    {
        if (ServiceHostId != -1)
            ServiceHost = Context.ServiceHosts.First(host => host.Id == ServiceHostId); //eww, but [Parameter] doesn't like cyclic references

        base.OnInitialized();
        ServiceStatusService.CollectionChanged += OnServiceStatusChange;
    }

    public void Dispose()
    {
        ServiceStatusService.CollectionChanged -= OnServiceStatusChange;
    }


    private async void OnServiceStatusChange(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
    {
        //TODO: only update if ServiceHost.Id changed
        await InvokeAsync(StateHasChanged);
    }


    public async void Start()
    {
        Console.WriteLine("Starting " + ServiceHost.Service.Name + " on " + ServiceHost.Host.Name);
        var startScripts = Context.ServiceScripts.Where(script => script.ServiceId == ServiceHost.ServiceId && script.ScriptType == ScriptType.StartUp).ToList();
        var startScript = startScripts.FirstOrDefault(s => s.HostType == ServiceHost.Host.HostType) ?? startScripts.First(s => s.HostType == HostType.Generic);
        await RunScript(startScript);
    }

    public async void Stop()
    {
        Console.WriteLine("Stopping " + ServiceHost.Service.Name + " on " + ServiceHost.Host.Name);
        var stopScripts = Context.ServiceScripts.Where(script => script.ServiceId == ServiceHost.ServiceId && script.ScriptType == ScriptType.ShutDown).ToList();
        var stopScript = stopScripts.FirstOrDefault(s => s.HostType == ServiceHost.Host.HostType) ?? stopScripts.First(s => s.HostType == HostType.Generic);
        await RunScript(stopScript);
    }


    public async Task RunScript(ServiceScript script)
    {
        Console.WriteLine("Running " + script.Script + " in " + ServiceHost.WorkingDirectory);
        var runConfig = new RunConfig()
            {
                WorkingDirectory = ServiceHost.WorkingDirectory,
                Command = script.Script,
                HostType = ServiceHost.Host.HostType,
            };
        foreach (var envVar in ServiceHost.EnvironmentVariables)
            runConfig.EnvironmentVariables[envVar.Variable] = envVar.Value;

        await ClientService.Clients.User(ServiceHost.Host.Name).SendAsync("RunScript", runConfig);
    }
}
